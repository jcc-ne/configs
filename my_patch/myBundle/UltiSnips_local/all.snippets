# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
from vimsnippets import foldmarker, make_box, get_comment_format
endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet fold "Insert a vim fold marker" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" b
`!p snip.rv = get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = get_comment_format()[2]`
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
snippet modeline "Vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

#########
# DATES #
#########
snippet date "YYYY-MM-DD" w
`!v strftime("%F")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%F %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` ${2:TODO}: $0${3: <${4:`!v strftime('%d-%m-%y')`}${5:, `!v g:snips_author`}>} `!p snip.rv=get_comment_format()[2]`
endsnippet

# vim:ft=snippets:

# python snippets too

snippet __main__ " main " b
if __name__ == "__main__":
endsnippet

snippet super
    super(HogFeatSKImage, self).__init__(img)
endsnippet

snippet train_test
        X_train, X_test, y_train, y_test = train_test_split(X, y)
endsnippet

snippet version
   import sys

   sys.version_info[0] < 3:
	  def next(iter):
		 return iter.next()
endsnippet

snippet plt
	 import matplotlib.pyplot as plt
	 import matplotlib
	 matplotlib.rcParams.update({'font.size': 8})
endsnippet

snippet cmap
    m = plt.cm.ScalarMappable(cmap=CMAP)
    m.set_array(w_abs / max_)
    cbaxes = fig.add_axes([0.90, 0.1, 0.03, 0.8])
    cb = plt.colorbar(m, cax=cbaxes, use_gridspec=True)
    cb.outline.set_visible(False)
endsnippet

snippet ax
    #  fig, axes = plt.subplots(nrows=2, ncols=4)
	 fig = plt.figure()
	 ax = fig.add_subplot(121)
endsnippet

snippet plt3d
	 from mpl_toolkits.mplot3d import Axes3D
	 fig = plt.figure()
	 ax2 = fig.add_subplot(111, projection='3d')
	 im = ax2.imshow(data, cmap=plt.cm.jet, vmax=data.max(), interpolation='nearest')
	 fig.colorbar(im)

	 x_res = 10
	 y_res = 10
	 xx, yy = np.meshgrid(np.linspace(0,1,x_res+1), np.linspace(0,1,y_res+1))
	 X = xx
	 Y = yy
	 Z = np.ones((x_res + 1, y_res + 1))
	 data = np.reshape(range(16), (4, 4)
	 ax2.plot_surface(X, Y, Z, rstride=1, cstride=1,
				cmap=plt.cm.jet,
				facecolors=plt.cm.jet(data), shade=False)

endsnippet

snippet unittest
import _add_test_path  # noqa
import unittest
import snapshottest

class TestCase(snapshottest.TestCase):
	@classmethod
	def setUpClass(cls):
		super(TestCase, cls).setUpClass()

	def setUp(self):
		pass
	def test_np_equal(self):
		self.assertTrue(
			np.equal(
				np.array([1,2,3]),
				np.array([1,3])
			).all()
			)
	def test_snapshot(self):
		d = [1, 2, 3]
		self.assertMatchSnapshot(d)

	def test_snapshot_nparray(self):
		import numpy as np
		d = np.array([1, 2, 3])
		self.assertMatchSnapshotNPArray(d)

	def test_snapshot_dataframe(self):
		import pandas as pd
		df = pd.DataFrame({'b': [3, 2, 3, 4]})
		self.assertMatchSnapshotDataFrame(df)

	#  @unittest.skip("demonstrating skipping")
	def test_skipped(self):
		self.assertEqual(1, 2)
	def tearDown(self):
		pass
if __name__ == "__main__":
	try:
		if __IPYTHON__:
			suite = unittest.TestLoader().loadTestsFromTestCase(
					TestCase)
			unittest.TextTestRunner(verbosity=2).run(suite)
	except NameError:
		unittest.main()
endsnippet

snippet subprocess
	import subprocess
	# output = subprocess.check_output(["", ""])
	proc = subprocess.Popen(["$1", "$2"], stdout=subprocess.PIPE, shell=True)
	(out, err) = proc.communicate()
endsnippet

snippet logging
import logging
import sys
logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)
logger = logging.getLogger()
endsnippet

snippet argparse
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--train_set', nargs='+', default=[],
                        help="other pairs dataframe for training")
    subparser = parser.add_subparsers(
        dest="subcommand",
        help="subcommand: predict or train")

    parser_train = subparser.add_parser('train', help="call train api")
    parser_train.add_argument('json_data_file',
                              help="ansible data in json format")
    parser_train.add_argument('-q', '--quiet', action="store_true",
                              default=False, help="only print output")

    args = parser.parse_args()
endsnippet

snippet reqparse
from flask_restful import Resource, reqparse, inputs
    def __init__(self):
        self.reqparse = reqparse.RequestParser()
        self.reqparse.add_argument('data', type=str,
                                   required=True,
                                   help='need input data',
                                   location='values')
        self.reqparse.add_argument('reload_model', type=inputs.boolean,
                                   action="store_true",
                                   required=False,
                                   default=False,
                                   help='need input data',
                                   location='values')
endsnippet

snippet mp4

import matplotlib.animation as animation

FFMpegWriter = animation.writers['ffmpeg']
metadata = dict(title='{}'.format(MODEL_NAME), artist='aurima',
                comment='movies of vis data after classifier detection')
				writer = FFMpegWriter(fps=4, metadata=metadata)
				fig = plt.figure(figsize=IMAGE_SIZE)
writer.setup(fig, "{}.mp4".format(MODEL_NAME), 100)

for i, image_np in enumerate(images):
	vis_util.visualize_boxes_and_labels_on_image_array(
					image_np,
					np.squeeze(boxes_n[i]),
					np.squeeze(classes_n[i]).astype(np.int32),
					np.squeeze(scores_n[i]),
					category_index,
					use_normalized_coordinates=True,
					line_thickness=4)
	plt.imshow(image_np)
	writer.grab_frame()
writer.finish()
endsnippet

snippet ipython_mp4
import io
import base64
from IPython.display import HTML

video = io.open("{}.mp4".format(MODEL_NAME), 'r+b').read()
encoded = base64.b64encode(video)
HTML(data='''<video alt="test" width="850" controls>
                <source src="data:video/mp4;base64,{0}" type="video/mp4" />
				             </video>'''.format(encoded.decode('ascii')))
endsnippet

snippet pyflakes
  #noqa
endsnippet

snippet a
<a href="$1"${2: class="${3:link}"}>
    $0
</a>
endsnippet

snippet notify
[Unit]
Description=thermal cam capture
After=redis.service

[Service]
Type=notify
NotifyAccess=all
Restart=always
ExecStart=/home/pi/aripi/labs/vitalsign_pkg/scripts/run_lepton_capture.py
WatchdogSec=5s
StartLimitInterval=20s
RestartSec=5
StartLimitBurst=20
StartLimitAction=reboot-force

[Install]
WantedBy=default.target
endsnippet
