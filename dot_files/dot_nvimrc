mapclear
let mapleader = ","
let g:python_host_skip_check = 1
set guioptions=M
inoremap kj <esc>
vnoremap kj <esc>
nnoremap <tab><tab> <c-w>w

" quick repeat, qq to start
nnoremap <leader>. @q

" -- leave terminal mode
tnoremap <c-l> <C-\><C-n><c-l>

" -- easier omnicomplete (for vimwiki keywords lookup)
inoremap <c-space> <c-x><c-o>


set t_Co=tmux-256color
set autochdir

" -- I'd prefer spaces to tabs
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab


" map space to jump to end of the line
nnoremap <space> $
vnoremap <space> $

" toggle spell
set spell spelllang=en_us

" hi SpellBad cterm=underline ctermfg=black ctermbg=219
nnoremap <leader><leader>s :set spell!<CR>
nnoremap <leader><leader>p :set paste!<CR>
nnoremap <leader>p "+p
" start with no spell
set nospell

" Use <leader>i to toggle display of whitespace
nmap <leader>i :set list!<CR>

" Starting with no list
nmap <leader>i :set list!<CR>
set nolist
"set lcs=trail:♪,tab:☂⚡
set lcs=trail:+,tab:+-

let hostname=substitute(system('hostname -s'), "\n", "", "")

" set background light or dark
if strftime("%H") < 17 && strftime("%H") > 6
   set background=light
else
   set background=dark
endif

" OR just set it to dark
set background=dark

" dein Scripts-----------------------------
" Follow https://github.com/Shougo/dein.vim to install
" curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
" sh ./installer.sh ~/.cache/dein

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim
set runtimepath+=~/.vim/

" Required:
if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')

  " Let dein manage dein
  " Required:
  "call dein#local("~/.vim/bundle")
  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
  " -- layout related
  call dein#add('jcc-ne/vim-template', {'rev': 'dev'})
  " call dein#add('scrooloose/nerdtree')
  call dein#add('majutsushi/tagbar')

  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('altercation/vim-colors-solarized')
  call dein#add('hzchirs/vim-material')
  
  " -- python dev
  call dein#add('python-mode/python-mode')
  call dein#add('davidhalter/jedi-vim')
  call dein#add('deoplete-plugins/deoplete-jedi')  " async jedi
  call dein#add('Shougo/deoplete.nvim')

  call dein#add('Konfekt/FastFold')
  call dein#add('tpope/vim-fugitive')
  call dein#add('tpope/vim-rhubarb')
  call dein#add('airblade/vim-gitgutter')

  " -- tmux related
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#add('epeli/slimux')

  call dein#add('vim-scripts/YankRing.vim')
  call dein#add('ctrlpvim/ctrlP.vim')
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  call dein#add('scrooloose/nerdcommenter')

  " -- general tasks
  call dein#add('vimoutliner/vimoutliner')
  call dein#add('vimwiki/vimwiki')
  call dein#add('jcc-ne/taskwiki')
  call dein#add('mattn/calendar-vim')
  call dein#add('farseer90718/vim-taskwarrior')
  call dein#add('iamcco/markdown-preview.nvim', {'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
              \ 'build': 'cd app & yarn install' })

  " -- local plugins
  call dein#add('~/.vim/bundle/myBundle')
  call dein#add('~/.vim/bundle/totl')

  " -- fuzzy finder
  call dein#add('~/.fzf')
  call dein#add('junegunn/fzf.vim')

  call dein#add('mbbill/undotree')

  call dein#add('whiteinge/diffconflicts')

  " -- Required:
  call dein#end()
  call dein#save_state()
endif

" ---- adjust background
let hostname=substitute(system('hostname -s'), "\n", "", "")
if hostname == ("Janines-iMac" || "blackbox")
    colorscheme gruvbox
    " -- fix slow issue
    let g:jedi#popup_on_dot = 0 " (default: 1)
   autocmd FileType python call jedi#configure_call_signatures()
else
    colorscheme solarized
endif
" colorscheme solarized

nmap <leader>c :colorscheme gruvbox<CR>

" Required:
filetype plugin indent on
syntax enable


" If you want to install not installed plugins on startup.
"if dein#check_install()
  "call dein#install()
"endif

"End dein Scripts-------------------------
"

let g:airline_powerline_fonts = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_theme = 'powerlineish'


" -- Line Num toggle --
nnoremap <silent><leader>1 :call RelativeNumberToggle()<CR>

"au FocusLost * :set number
"au FocusGained * :set relativenumber
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber

" -- fastfold
"  prevents pymode folding from being very slow, works with version d2dead6
"  cd ~/.vim/bundle/python-mode/
"  git checkout d2dead6     (git checkout tags/snappy)

nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_force = 1
" let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
" let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
" -- to be faster, set the fastfold update commands to blank
let g:fastfold_fold_command_suffixes =  []  
let g:fastfold_fold_movement_commands = []


" ====  set pymode ====
filetype off
filetype plugin indent on
syntax on

" <leader>, list functions
" <leager>g go to definition
"
" au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"

" let g:pymode_python = 'python3'
let g:pymode_folding = 1

" Load rope plugin
let g:pymode_rope = 0

" Documentatron
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Key for run python code
let g:pymode_run = 1
let g:pymode_run_key = 'R'

"Linting
let g:pymode_lint = 1
" let g:pymode_lint_checker = "pyflakes, pep8"
let g:pymode_lint_checker = "pep8"
" Auto check on save
let g:pymode_lint_write = 1

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" disable conflicting keys and their functions
let g:pymode_breakpoint = 0
" let g:pymode_breakpoint_bind = '<leader>b'  " conflicts with :Buffers
let g:pymode_run = 0

"-----------------set jedi-------------------

let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#goto_stubs_command = "<leader><leader>s"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
"let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader><leader>r"
let g:jedi#show_call_signatures = "1"
let g:jedi#goto_stubs_command = "<leader><leader>s"

" let g:jedi#force_py_version = 3 " (default: 'auto')
" let g:jedi#popup_select_first = 0 " (default: 1)
 let g:jedi#popup_on_dot = 0 " (default: 1)
 let g:jedi#completions_enabled = 0  " use deoplete-jedi instead

" -- deoplete setup
 let g:deoplete#enable_at_startup = 1
 let g:deoplete#sources#jedi#ignore_errors = v:true
 nnoremap <leader>D :call deoplete#disable()<CR>
 nnoremap <leader>E :call deoplete#enable()<CR>

" ------- snippet -------------

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsSnippetsDir="~/.vim/bundle/myBundle/UltiSnips"
" let g:UltiSnipsSnippetsDir="~/.config/nvim/UltiSnips"  " configs/install/setup_ultisnips_dir.sh to config the dir
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" -- slimux setup
map <Leader>s :SlimuxREPLSendLine<CR>
vmap <Leader>s :SlimuxREPLSendSelection<CR>
map <Leader>a :SlimuxShellLast<CR>
map <Leader>k :SlimuxSendKeysLast<CR>

" -  yankring 
map <Leader><space> :YRShow <CR>
let g:yankring_replace_n_pkey="<leader> p"

" - map ctrl-p back to ctrl-p
let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|(\.(swp|ico|git|svn|pyc))'


" - expandtab for some filetypes
autocmd FileType wiki,vimwiki,unix set expandtab
autocmd FileType wiki,vimwiki,unix set tabstop=4
autocmd FileType wiki,vimwiki set foldmethod=expr

"au BufEnter *.md set foldmethod=indent
au BufEnter *.md set foldlevel=20
au BufEnter *.md set shiftwidth=4

" - vimwiki
nnoremap <leader>wg :VimwikiGenerateTags<CR>

let g:vimwiki_list = [
            \{'path': '~/vimwiki/text/work',
            \ 'path_html': '~/vimwiki/html/work',
            \'syntax': 'markdown',
            \'ext': '.md',
            \ 'auto_toc': 1,
            \ 'auto_tags': 1,
            \ 'index': 'index'},
            \{'path': '~/vimwiki/text/fin',
            \ 'path_html': '~/vimwiki/html/fin',
            \'syntax': 'default',
            \'ext': '.md',
            \ 'auto_toc': 1,
            \ 'auto_tags': 1,
            \ 'index': 'index'},
            \{'path': '~/vimwiki/text/general',
            \ 'path_html': '~/vimwiki/html/general',
            \ 'syntax': 'default',
            \ 'ext': '.wiki',
            \ 'auto_toc': 1,
            \ 'index': 'index',
            \ 'template_path': '~/vimwiki/templates/',
            \ 'template_default': 'def_template',
            \ 'template_ext': '.html'},
            \{'path': '~/vimwiki/text/arc_2015',
            \ 'ext': '.wiki',
            \ 'auto_toc': 1}
            \]

" -- nerdtree
nnoremap <F2> :NERDTreeToggle<CR>

" -- undotree
nnoremap <F5> :UndotreeToggle<CR>

" -- nerdcommenter
let NERDSpaceDelims=1
autocmd FileType python let NERDSpaceDelims=0

" -- gitgutter
nnoremap <F3> :GitGutterBufferToggle<CR>
let g:gitgutter_override_sign_column_highlight = 1

" -- fzf mapping
" -- usage ex: ,r to grep a function, 
"  <tab> to select <C-a> all <C-d> deselect all, <CR> quickfix
let g:fzf_command_prefix = 'Fz'
nmap <leader>f :FzFiles<CR>
nmap <leader><leader>f :FzGFiles<CR>
nmap <leader>h :FzHistory<CR>
nmap <leader>b :FzBuffers<CR>
nmap <leader>r :FzRg<CR>
nmap <leader>l :FzLines<CR>
nmap <leader><leader>l :FzBLines<CR>

nnoremap <leader>2 :FZF -m ../<cr>
nnoremap <leader>3 :FZF -m ../../<cr>
nnoremap <leader>4 :FZF -m ../../../<cr>


" -- taskwiki related
" --    quick key to open general taskwarrior.totl
" --    cheat sheets:
" --        ,td    mark as done
nnoremap <leader><leader>t :e ~/vimwiki/otl/taskwarrior.totl<cr>
 
nnoremap <silent> <leader>q :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

" -- slimux settings
let g:slimux_select_from_current_window = 1

let g:license = "GNU GPLv3"

" -- vimgrep
" :args `find . -type f`
" :vim /pattern1/ ##
" :vim /pattern2/ ##
" :vim /pattern3/ ##
nnoremap <F1> :args `find . -type f`<CR>:vim // ##

autocmd User fugitive 
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete
