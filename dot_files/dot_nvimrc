mapclear
let mapleader = ","
" let g:python3_host_prog="~/.pyenv/versions/anaconda3-2022.05/bin/python"
" let g:python_host_prog='~/anaconda3/bin/python'
let g:python_host_skip_check = 1
set guioptions=M
inoremap kj <esc>
vnoremap kj <esc>
nnoremap <tab><tab> <c-w>w

" quick repeat, qq to start
nnoremap <leader>. @q

" -- leave terminal mode
tnoremap <c-l> <C-\><C-n><c-l>

" -- easier omnicomplete (for vimwiki keywords tag lookup)
inoremap <c-space> <c-x><c-n>


set t_Co=tmux-256color
let g:solarized_termcolors=256
set autochdir

" -- I'd prefer spaces to tabs
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab


" map space to jump to end of the line
nnoremap <space> $
vnoremap <space> $

" toggle spell
set spell spelllang=en_us

" hi SpellBad cterm=underline ctermfg=black ctermbg=219
nnoremap <leader><leader>s :set spell!<CR>
nnoremap <leader><leader>p :set paste!<CR>
nnoremap <leader>p "+p
" start with no spell
set nospell

" Use <leader>i to toggle display of whitespace
nmap <leader>i :set list!<CR>

" Starting with no list
nmap <leader>i :set list!<CR>
set nolist
"set lcs=trail:♪,tab:☂⚡
set lcs=trail:+,tab:+-


if &compatible
  set nocompatible               " Be iMproved
endif

lua require('plugins')

let hostname=substitute(system('hostname -s'), "\n", "", "")
" echo hostname

" ---- adjust background

let colorscheme_=$VIMCOLORSCHEME
if $VIMCOLORSCHEME != ""
    colorscheme $VIMCOLORSCHEME
else
    if hostname == "Janines-iMac" || hostname == "blackbox"
        colorscheme gruvbox
        " -- fix slow issue
        let g:jedi#popup_on_dot = 0 " (default: 1)
       autocmd FileType python call jedi#configure_call_signatures()
    else
        colorscheme solarized8
    endif
endif

" set background light or dark
if strftime("%H") < 17 && strftime("%H") > 6
   set background=light
else
   set background=dark
endif

if $VIMBG != ""
    exe 'set background='.expand($VIMBG)
endif
set background=dark

" nmap <leader>c :colorscheme gruvbox<CR>

" Required:
filetype plugin indent on
syntax enable


nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_force = 1
" -- to be faster, set the fastfold update commands to blank
let g:fastfold_fold_command_suffixes =  []  
let g:fastfold_fold_movement_commands = []

lua require('neovim_standalone')

" ------- snippet -------------

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-K>"
" let g:UltiSnipsSnippetsDir="~/.vim/bundle/myBundle/UltiSnips"
" let g:UltiSnipsSnippetDirectories="~/.config/nvim/UltiSnips"  " configs/install/setup_ultisnips_dir.sh to config the dir
" let g:UltiSnipsSnippetsDir="~/.config/nvim/UltiSnips"  " configs/install/setup_ultisnips_dir.sh to config the dir
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" -- slimux setup
map <Leader>s :SlimuxREPLSendLine<CR>
vmap <Leader>s :SlimuxREPLSendSelection<CR>
map <Leader>a :SlimuxShellLast<CR>
map <Leader>k :SlimuxSendKeysLast<CR>

" -  yankring 
map <Leader><space> :YRShow <CR>
let g:yankring_replace_n_pkey="<leader>p"

" - map ctrl-p back to ctrl-p
let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|(\.(swp|ico|git|svn|pyc))'


" - expandtab for some filetypes
autocmd FileType wiki,vimwiki,unix set expandtab
autocmd FileType wiki,vimwiki,unix set tabstop=4
autocmd FileType wiki,vimwiki set foldmethod=expr

"au BufEnter *.md set foldmethod=indent
au BufEnter *.md set foldlevel=20
au BufEnter *.md set shiftwidth=4

" - vimwiki
" - the plugin is set to be lazy loaded in neovim_standalone.lua
" - it's activated by the command VimwikiMakeDiaryNote
nnoremap <leader>w<leader>w :VimwikiMakeDiaryNote<CR>
nnoremap <leader>wg :VimwikiGenerateTags<CR>
nnoremap <leader>wt :VimwikiRebuildTags<CR>

" -- nerdtree
nnoremap <F2> :NERDTreeToggle<CR>

" -- undotree
" nnoremap <F5> :UndotreeToggle<CR>

" -- nerdcommenter
let NERDSpaceDelims=1
autocmd FileType python let NERDSpaceDelims=0

" -- gitgutter
nnoremap <F3> :GitGutterBufferToggle<CR>
let g:gitgutter_override_sign_column_highlight = 1
highlight clear SignColumn

" -- Tagbar
nnoremap <F4> :TagbarToggle<CR>

" -- Line Num toggle --
" nnoremap <F1> :call  RelativeNumberToggle()<CR>
nnoremap <silent><leader>1 :call RelativeNumberToggle()<CR>


" -- fzf mapping
" -- usage ex: ,r to grep a function, 
"  <tab> to select <C-a> all <C-d> deselect all, <CR> quickfix
"
nnoremap <silent> <leader>q :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

" -- slimux settings
let g:slimux_select_from_current_window = 1

let g:license = "GNU GPLv3"

" -- vimgrep, similar effects as fzf rp <leader>r
" :args `find . -type f`
" :vim /pattern1/ ##
" :vim /pattern2/ ##
" :vim /pattern3/ ##
nnoremap <F7> :args `find . -type f`<CR>:vim // ##

autocmd User fugitive 
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete


" -- How to resize splits
" -- For a split window: You can use Ctrl-w + and Ctrl-w - to resize the height of the current window by a single row. For a vsplit window: You can use Ctrl-w > and Ctrl-w <
nnoremap <leader>m :setf markdown<cr>
nnoremap <leader>e :!black %<cr>

" --- lua plugins in ~/.config/nvim/lua/plugins.lua
lua require('lsp_mappings')